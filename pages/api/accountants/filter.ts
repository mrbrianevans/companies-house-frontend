import type { NextApiRequest, NextApiResponse } from "next";
import { getDatabasePool } from "../../../helpers/connectToDatabase";
import { IFilter } from "../../../types/IFilters";

interface IAccountantFilter {
  category: "clients" | "software" | "location" | "financial"
  comparison:
    | "equals"
    | "less than"
    | "greater than"
    | "not equal to"
    | "asc"
    | "desc"
  value: string | number
}

// /api/accountants/filter
export default async (req: NextApiRequest, res: NextApiResponse) => {
  const { body: filters }: { body: IFilter[] } = req;
  const queries: string[] = [],
    values: any[] = [];
  for (const filter of filters) {
    //todo: each type of filter has a function that returns a sql query
    if (filter.category === "software") {
      const { query, value } = filterBySoftware(filter);
      queries.push(query); //todo: need to update the $1 references for the number of values
      values.concat(value); //todo: I don't think the concat method actually works
    }
  }
  const pool = await getDatabasePool();
  //todo: combine all the sql queries generated by each filter into one massive sql query
  const { rows: matches } = await pool.query(queries[0], values);
  res
    .status(200)
    .send(
      "<b>View matching accountants here</b> <p>" +
      JSON.stringify(matches) +
      "</p>"
    );
}

const filterBySoftware: (filter: IFilter) => { query: string; value: any[] } = (
  filter
) => {
  if (filter.category !== "software")
    throw new Error("Wrong category function used");
  // this is matching accounts who either do or who don't use the specified software
  const sqlGetPractices = `
      SELECT DISTINCT value FROM accounts WHERE label='Name of entity accountants' AND company_number
      IN (
          SELECT DISTINCT company_number FROM accounts 
          WHERE label='Name of production software' AND value=$1 LIMIT 1000
      ) LIMIT 10;
  `.replace("IN", filter.comparison === "exclude" ? " NOT IN " : "IN");
  console.log(
    "Querying:",
    sqlGetPractices.replace("$1", "'" + filter.value.toString() + "'")
  );
  return { query: sqlGetPractices, value: [filter.value] };
};
