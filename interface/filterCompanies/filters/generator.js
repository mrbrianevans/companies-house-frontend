// this is to speed up the creation of new filters, and also help maintainence

const fs = require('fs')
const filtersConfig = ['profit', 'employees', 'current assets', 'cash at bank', 'debtors', 'creditors', 'net assets']

const generateFilterFile = (name) => {
  const lowerName = name.toString().toLowerCase().replace('_', ' ')
  // console.time('Wrote ' + lowerName + '.ts')
  const pascalName = lowerName
    .split(' ')
    .map((l) => l.slice(0, 1).toUpperCase() + l.slice(1))
    .join('')
  const camelName = pascalName.slice(0, 1).toLowerCase() + pascalName.slice(1)
  const columnName = lowerName.split(' ').join('_')
  const fileContents = `// FILE GENERATED BY generator.js
import { IFilterOption, INumberFilter } from '../../../types/IFilters'
import { IMinorQuery } from '../../../types/IQueries'

export const filterCompaniesBy${pascalName}: (filter: INumberFilter) => IMinorQuery = (filter) => {
  const query = \`
      SELECT company_number
      FROM wide_accounts_combined
      WHERE ${columnName} BETWEEN ? AND ?
  \`

  return { query, value: [filter.min, filter.max] }
}

export const filterCompaniesBy${pascalName}Metadata: IFilterOption = {
  category: '${lowerName}',
  possibleComparisons: ['is between'],
  valueType: 'number'
}
`

  fs.writeFileSync(camelName + '.ts', fileContents)
  console.log(`filterMap.set('${lowerName}', {
    filterOption: filterCompaniesBy${pascalName}Metadata,
    filter: filterCompaniesBy${pascalName}
  })`)
  // console.timeEnd('Wrote ' + lowerName + '.ts')
}

console.time(`// Generated ${filtersConfig.length} files`)
console.log('// Copy & Paste this to the listOfFilters file')
filtersConfig.forEach(generateFilterFile)
console.timeEnd(`// Generated ${filtersConfig.length} files`)
